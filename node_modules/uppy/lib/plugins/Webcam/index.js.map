{"version":3,"sources":["../../../src/plugins/Webcam/index.js"],"names":["Plugin","require","WebcamProvider","Translator","getFileTypeExtension","supportsMediaRecorder","WebcamIcon","CameraScreen","PermissionsScreen","module","exports","core","opts","userMedia","protocol","location","match","type","id","title","icon","focus","bind","defaultLocale","strings","smile","defaultOptions","enableFlash","onBeforeSnapshot","Promise","resolve","countdown","locale","modes","params","swfURL","width","height","dest_width","dest_height","image_format","jpeg_quality","enable_flash","force_flash","flip_horiz","fps","upload_name","constraints","flashNotDetectedText","noInterfaceFoundText","unfreeze_snap","translator","i18n","translate","install","setPluginState","render","start","stop","takeSnapshot","startRecording","stopRecording","oneTwoThreeSmile","webcam","webcamActive","then","stream","cameraReady","catch","err","cameraError","recorder","MediaRecorder","recordingChunks","addEventListener","event","push","data","isRecording","reject","mimeType","fileExtension","Error","file","source","name","Date","now","Blob","addFile","getAudioTracks","forEach","track","getVideoTracks","streamSrc","count","countDown","setInterval","clearInterval","captureInProgress","info","setTimeout","videoEl","target","querySelector","message","video","image","getImage","tagFile","state","webcamState","getPluginState","useTheFlash","URL","createObjectURL","onSnapshot","onStartRecording","onStopRecording","onFocus","onStop","supportsRecording","recording","getSWFHTML","src","init","plugin","mount","uninstall","reset","unmount"],"mappings":"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","file":"index.js","sourcesContent":["const Plugin = require('../Plugin')\nconst WebcamProvider = require('../../uppy-base/src/plugins/Webcam')\nconst Translator = require('../../core/Translator')\nconst { getFileTypeExtension,\n        supportsMediaRecorder } = require('../../core/Utils')\nconst WebcamIcon = require('./WebcamIcon')\nconst CameraScreen = require('./CameraScreen')\nconst PermissionsScreen = require('./PermissionsScreen')\n\n/**\n * Webcam\n */\nmodule.exports = class Webcam extends Plugin {\n  constructor (core, opts) {\n    super(core, opts)\n    this.userMedia = true\n    this.protocol = location.protocol.match(/https/i) ? 'https' : 'http'\n    this.type = 'acquirer'\n    this.id = 'Webcam'\n    this.title = 'Webcam'\n    this.icon = WebcamIcon\n    this.focus = this.focus.bind(this)\n\n    const defaultLocale = {\n      strings: {\n        smile: 'Smile!'\n      }\n    }\n\n    // set default options\n    const defaultOptions = {\n      enableFlash: true,\n      onBeforeSnapshot: () => Promise.resolve(),\n      countdown: false,\n      locale: defaultLocale,\n      modes: [\n        'video-audio',\n        'video-only',\n        'audio-only',\n        'picture'\n      ]\n    }\n\n    this.params = {\n      swfURL: 'webcam.swf',\n      width: 400,\n      height: 300,\n      dest_width: 800,         // size of captured image\n      dest_height: 600,        // these default to width/height\n      image_format: 'jpeg',  // image format (may be jpeg or png)\n      jpeg_quality: 90,      // jpeg image quality from 0 (worst) to 100 (best)\n      enable_flash: true,    // enable flash fallback,\n      force_flash: false,    // force flash mode,\n      flip_horiz: false,     // flip image horiz (mirror mode)\n      fps: 30,               // camera frames per second\n      upload_name: 'webcam', // name of file in upload post data\n      constraints: null,     // custom user media constraints,\n      flashNotDetectedText: 'ERROR: No Adobe Flash Player detected.  Webcam.js relies on Flash for browsers that do not support getUserMedia (like yours).',\n      noInterfaceFoundText: 'No supported webcam interface found.',\n      unfreeze_snap: true    // Whether to unfreeze the camera after snap (defaults to true)\n    }\n\n    // merge default options with the ones set by user\n    this.opts = Object.assign({}, defaultOptions, opts)\n\n    this.locale = Object.assign({}, defaultLocale, this.opts.locale)\n    this.locale.strings = Object.assign({}, defaultLocale.strings, this.opts.locale.strings)\n\n    // i18n\n    this.translator = new Translator({locale: this.locale})\n    this.i18n = this.translator.translate.bind(this.translator)\n\n    this.install = this.install.bind(this)\n    this.setPluginState = this.setPluginState.bind(this)\n\n    this.render = this.render.bind(this)\n\n    // Camera controls\n    this.start = this.start.bind(this)\n    this.stop = this.stop.bind(this)\n    this.takeSnapshot = this.takeSnapshot.bind(this)\n    this.startRecording = this.startRecording.bind(this)\n    this.stopRecording = this.stopRecording.bind(this)\n    this.oneTwoThreeSmile = this.oneTwoThreeSmile.bind(this)\n    // this.justSmile = this.justSmile.bind(this)\n\n    this.webcam = new WebcamProvider(this.opts, this.params)\n    this.webcamActive = false\n\n    if (this.opts.countdown) {\n      this.opts.onBeforeSnapshot = this.oneTwoThreeSmile\n    }\n\n    // if (typeof opts.onBeforeSnapshot === 'undefined' || !this.opts.onBeforeSnapshot) {\n    //   if (this.opts.countdown) {\n    //     this.opts.onBeforeSnapshot = this.oneTwoThreeSmile\n    //   } else {\n    //     this.opts.onBeforeSnapshot = this.justSmile\n    //   }\n    // }\n  }\n\n  start () {\n    this.webcamActive = true\n\n    this.webcam.start()\n      .then((stream) => {\n        this.stream = stream\n        this.setPluginState({\n          // videoStream: stream,\n          cameraReady: true\n        })\n      })\n      .catch((err) => {\n        this.setPluginState({\n          cameraError: err\n        })\n      })\n  }\n\n  startRecording () {\n    // TODO We can check here if any of the mime types listed in the\n    // mimeToExtensions map in Utils.js are supported, and prefer to use one of\n    // those.\n    // Right now we let the browser pick a type that it deems appropriate.\n    this.recorder = new MediaRecorder(this.stream)\n    this.recordingChunks = []\n    this.recorder.addEventListener('dataavailable', (event) => {\n      this.recordingChunks.push(event.data)\n    })\n    this.recorder.start()\n\n    this.setPluginState({\n      isRecording: true\n    })\n  }\n\n  stopRecording () {\n    return new Promise((resolve, reject) => {\n      this.recorder.addEventListener('stop', () => {\n        this.setPluginState({\n          isRecording: false\n        })\n\n        const mimeType = this.recordingChunks[0].type\n        const fileExtension = getFileTypeExtension(mimeType)\n\n        if (!fileExtension) {\n          reject(new Error(`Could not upload file: Unsupported media type \"${mimeType}\"`))\n          return\n        }\n\n        const file = {\n          source: this.id,\n          name: `webcam-${Date.now()}.${fileExtension}`,\n          type: mimeType,\n          data: new Blob(this.recordingChunks, { type: mimeType })\n        }\n\n        this.core.addFile(file)\n\n        this.recordingChunks = null\n        this.recorder = null\n\n        resolve()\n      })\n\n      this.recorder.stop()\n    })\n  }\n\n  stop () {\n    this.stream.getAudioTracks().forEach((track) => {\n      track.stop()\n    })\n    this.stream.getVideoTracks().forEach((track) => {\n      track.stop()\n    })\n    this.webcamActive = false\n    this.stream = null\n    this.streamSrc = null\n  }\n\n  oneTwoThreeSmile () {\n    return new Promise((resolve, reject) => {\n      let count = this.opts.countdown\n\n      let countDown = setInterval(() => {\n        if (!this.webcamActive) {\n          clearInterval(countDown)\n          this.captureInProgress = false\n          return reject(new Error('Webcam is not active'))\n        }\n\n        if (count > 0) {\n          this.core.info(`${count}...`, 'warning', 800)\n          count--\n        } else {\n          clearInterval(countDown)\n          this.core.info(this.i18n('smile'), 'success', 1500)\n          setTimeout(() => resolve(), 1500)\n        }\n      }, 1000)\n    })\n  }\n\n  // justSmile () {\n  //   return new Promise((resolve, reject) => {\n  //     setTimeout(() => this.core.info(this.i18n('smile'), 'success', 1000), 1500)\n  //     setTimeout(() => resolve(), 2000)\n  //   })\n  // }\n\n  takeSnapshot () {\n    const opts = {\n      name: `webcam-${Date.now()}.jpg`,\n      mimeType: 'image/jpeg'\n    }\n\n    this.videoEl = this.target.querySelector('.UppyWebcam-video')\n\n    if (this.captureInProgress) return\n    this.captureInProgress = true\n\n    this.opts.onBeforeSnapshot().catch((err) => {\n      const message = typeof err === 'object' ? err.message : err\n      this.core.info(message, 'error', 5000)\n      return Promise.reject(new Error(`onBeforeSnapshot: ${message}`))\n    }).then(() => {\n      const video = this.target.querySelector('.UppyWebcam-video')\n      if (!video) {\n        this.captureInProgress = false\n        return Promise.reject(new Error('No video element found, likely due to the Webcam tab being closed.'))\n      }\n\n      const image = this.webcam.getImage(video, opts)\n\n      const tagFile = {\n        source: this.id,\n        name: opts.name,\n        data: image.data,\n        type: opts.mimeType\n      }\n\n      this.captureInProgress = false\n      this.core.addFile(tagFile)\n    })\n  }\n\n  focus () {\n    if (this.opts.countdown) return\n    setTimeout(() => {\n      this.core.info(this.i18n('smile'), 'success', 1500)\n    }, 1000)\n  }\n\n  render (state) {\n    if (!this.webcamActive) {\n      this.start()\n    }\n\n    const webcamState = this.getPluginState()\n\n    if (!webcamState.cameraReady && !webcamState.useTheFlash) {\n      return PermissionsScreen(webcamState)\n    }\n\n    if (!this.streamSrc) {\n      this.streamSrc = this.stream ? URL.createObjectURL(this.stream) : null\n    }\n\n    return CameraScreen(Object.assign({}, webcamState, {\n      onSnapshot: this.takeSnapshot,\n      onStartRecording: this.startRecording,\n      onStopRecording: this.stopRecording,\n      onFocus: this.focus,\n      onStop: this.stop,\n      modes: this.opts.modes,\n      supportsRecording: supportsMediaRecorder(),\n      recording: webcamState.isRecording,\n      getSWFHTML: this.webcam.getSWFHTML,\n      src: this.streamSrc\n    }))\n  }\n\n  install () {\n    this.webcam.init()\n    this.setPluginState({\n      cameraReady: false\n    })\n\n    const target = this.opts.target\n    const plugin = this\n    this.target = this.mount(target, plugin)\n  }\n\n  uninstall () {\n    this.webcam.reset()\n    this.unmount()\n  }\n}\n"]}