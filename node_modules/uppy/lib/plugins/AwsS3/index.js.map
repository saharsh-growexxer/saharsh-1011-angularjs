{"version":3,"sources":["../../../src/plugins/AwsS3/index.js"],"names":["Plugin","require","module","exports","core","opts","type","id","title","defaultLocale","strings","preparingUpload","defaultOptions","getUploadParameters","bind","locale","prepareUpload","file","host","Error","filename","encodeURIComponent","name","general","specific","fetch","method","headers","accept","then","response","json","fileIDs","forEach","emit","mode","message","value","setState","xhrUpload","state","responseUrlFieldName","getResponseData","xhr","responseXML","location","responseURL","getValue","key","el","querySelector","textContent","bucket","etag","getResponseError","error","Promise","all","map","getFile","paramsPromise","resolve","params","responses","updatedFiles","index","url","fields","xhrOpts","formData","toLowerCase","endpoint","fieldName","metaFields","Object","keys","updatedFile","meta","files","getState","install","addPreProcessor","uninstall","removePreProcessor"],"mappings":"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","file":"index.js","sourcesContent":["const Plugin = require('../Plugin')\n\nmodule.exports = class AwsS3 extends Plugin {\n  constructor (core, opts) {\n    super(core, opts)\n    this.type = 'uploader'\n    this.id = 'AwsS3'\n    this.title = 'AWS S3'\n\n    const defaultLocale = {\n      strings: {\n        preparingUpload: 'Preparing upload...'\n      }\n    }\n\n    const defaultOptions = {\n      getUploadParameters: this.getUploadParameters.bind(this),\n      locale: defaultLocale\n    }\n\n    this.opts = Object.assign({}, defaultOptions, opts)\n    this.locale = Object.assign({}, defaultLocale, this.opts.locale)\n    this.locale.strings = Object.assign({}, defaultLocale.strings, this.opts.locale.strings)\n\n    this.prepareUpload = this.prepareUpload.bind(this)\n  }\n\n  getUploadParameters (file) {\n    if (!this.opts.host) {\n      throw new Error('Expected a `host` option containing an uppy-server address.')\n    }\n\n    const filename = encodeURIComponent(file.name)\n    const type = encodeURIComponent(`${file.type.general}/${file.type.specific}`)\n    return fetch(`${this.opts.host}/s3/params?filename=${filename}&type=${type}`, {\n      method: 'get',\n      headers: { accept: 'application/json' }\n    }).then((response) => response.json())\n  }\n\n  prepareUpload (fileIDs) {\n    fileIDs.forEach((id) => {\n      this.core.emit('core:preprocess-progress', id, {\n        mode: 'determinate',\n        message: this.locale.strings.preparingUpload,\n        value: 0\n      })\n    })\n\n    this.core.setState({\n      xhrUpload: Object.assign({}, this.core.state.xhrUpload, {\n        responseUrlFieldName: 'location',\n        getResponseData (xhr) {\n          // If no response, we've hopefully done a PUT request to the file\n          // in the bucket on its full URL.\n          if (!xhr.responseXML) {\n            return { location: xhr.responseURL }\n          }\n          function getValue (key) {\n            const el = xhr.responseXML.querySelector(key)\n            return el ? el.textContent : ''\n          }\n          return {\n            location: getValue('Location'),\n            bucket: getValue('Bucket'),\n            key: getValue('Key'),\n            etag: getValue('ETag')\n          }\n        },\n        getResponseError (xhr) {\n          // If no response, we don't have a specific error message, use the default.\n          if (!xhr.responseXML) {\n            return\n          }\n          const error = xhr.responseXML.querySelector('Error > Message')\n          return new Error(error.textContent)\n        }\n      })\n    })\n\n    return Promise.all(\n      fileIDs.map((id) => {\n        const file = this.core.getFile(id)\n        const paramsPromise = Promise.resolve()\n          .then(() => this.opts.getUploadParameters(file))\n        return paramsPromise.then((params) => {\n          this.core.emit('core:preprocess-progress', file.id, {\n            mode: 'determinate',\n            message: this.locale.strings.preparingUpload,\n            value: 1\n          })\n          return params\n        })\n      })\n    ).then((responses) => {\n      const updatedFiles = {}\n      fileIDs.forEach((id, index) => {\n        const file = this.core.getFile(id)\n        const {\n          method = 'post',\n          url,\n          fields,\n          headers\n        } = responses[index]\n        const xhrOpts = {\n          method,\n          formData: method.toLowerCase() === 'post',\n          endpoint: url,\n          fieldName: 'file',\n          metaFields: Object.keys(fields)\n        }\n\n        if (headers) {\n          xhrOpts.headers = headers\n        }\n\n        const updatedFile = Object.assign({}, file, {\n          meta: Object.assign({}, file.meta, fields),\n          xhrUpload: xhrOpts\n        })\n\n        updatedFiles[id] = updatedFile\n      })\n\n      this.core.setState({\n        files: Object.assign({}, this.core.getState().files, updatedFiles)\n      })\n\n      fileIDs.forEach((id) => {\n        this.core.emit('core:preprocess-complete', id)\n      })\n    })\n  }\n\n  install () {\n    this.core.addPreProcessor(this.prepareUpload)\n  }\n\n  uninstall () {\n    this.core.removePreProcessor(this.prepareUpload)\n  }\n}\n"]}